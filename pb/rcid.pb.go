// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rcid.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommandRequest struct {
	// PATH to command to execute. If request omit the shell param, this requires to absolute path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Args to command.
	Arg []string `protobuf:"bytes,2,rep,name=arg,proto3" json:"arg,omitempty"`
	// Working Directory of the command
	Workdir string `protobuf:"bytes,3,opt,name=workdir,proto3" json:"workdir,omitempty"`
	// Environment Variables of the command.
	Env map[string]string `protobuf:"bytes,4,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Timeout Second to finished the command. If command exceed the time, rcid send KILL signal to the command.
	Timeout              int32    `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandRequest) Reset()         { *m = CommandRequest{} }
func (m *CommandRequest) String() string { return proto.CompactTextString(m) }
func (*CommandRequest) ProtoMessage()    {}
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84ab7c9567d32e0d, []int{0}
}

func (m *CommandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandRequest.Unmarshal(m, b)
}
func (m *CommandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandRequest.Marshal(b, m, deterministic)
}
func (m *CommandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandRequest.Merge(m, src)
}
func (m *CommandRequest) XXX_Size() int {
	return xxx_messageInfo_CommandRequest.Size(m)
}
func (m *CommandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommandRequest proto.InternalMessageInfo

func (m *CommandRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CommandRequest) GetArg() []string {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (m *CommandRequest) GetWorkdir() string {
	if m != nil {
		return m.Workdir
	}
	return ""
}

func (m *CommandRequest) GetEnv() map[string]string {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *CommandRequest) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type CommandResult struct {
	// execution status of the command, if true the command did not finished with EXIT 0.
	Error bool `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	// the message of STDOUT
	Stdout string `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// the message of STDERR
	Stderr               string   `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandResult) Reset()         { *m = CommandResult{} }
func (m *CommandResult) String() string { return proto.CompactTextString(m) }
func (*CommandResult) ProtoMessage()    {}
func (*CommandResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_84ab7c9567d32e0d, []int{1}
}

func (m *CommandResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandResult.Unmarshal(m, b)
}
func (m *CommandResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandResult.Marshal(b, m, deterministic)
}
func (m *CommandResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandResult.Merge(m, src)
}
func (m *CommandResult) XXX_Size() int {
	return xxx_messageInfo_CommandResult.Size(m)
}
func (m *CommandResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandResult.DiscardUnknown(m)
}

var xxx_messageInfo_CommandResult proto.InternalMessageInfo

func (m *CommandResult) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *CommandResult) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *CommandResult) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func init() {
	proto.RegisterType((*CommandRequest)(nil), "github.com.shoma.rcid.pb.CommandRequest")
	proto.RegisterMapType((map[string]string)(nil), "github.com.shoma.rcid.pb.CommandRequest.EnvEntry")
	proto.RegisterType((*CommandResult)(nil), "github.com.shoma.rcid.pb.CommandResult")
}

func init() { proto.RegisterFile("rcid.proto", fileDescriptor_84ab7c9567d32e0d) }

var fileDescriptor_84ab7c9567d32e0d = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x4f, 0x4b, 0xf4, 0x30,
	0x10, 0xc6, 0xdf, 0x34, 0xdb, 0xbe, 0xbb, 0x23, 0x8a, 0x04, 0x91, 0xb0, 0xa7, 0xd2, 0x8b, 0x3d,
	0x05, 0x5d, 0x41, 0xc4, 0xa3, 0xcb, 0x7e, 0x81, 0x80, 0x17, 0xf1, 0xd2, 0x6e, 0xe3, 0xb6, 0xec,
	0x36, 0xa9, 0xd3, 0xa4, 0xb2, 0x9f, 0xd8, 0xaf, 0x21, 0xe9, 0x1f, 0xc1, 0x83, 0xb0, 0xb7, 0xf9,
	0x4d, 0x9e, 0x99, 0xe7, 0x19, 0x02, 0x80, 0xdb, 0xaa, 0x10, 0x0d, 0x1a, 0x6b, 0x18, 0xdf, 0x55,
	0xb6, 0x74, 0xb9, 0xd8, 0x9a, 0x5a, 0xb4, 0xa5, 0xa9, 0x33, 0x31, 0x3c, 0xe6, 0xc9, 0x17, 0x81,
	0x8b, 0xb5, 0xa9, 0xeb, 0x4c, 0x17, 0x52, 0x7d, 0x38, 0xd5, 0x5a, 0xc6, 0x60, 0xd6, 0x64, 0xb6,
	0xe4, 0x24, 0x26, 0xe9, 0x42, 0xf6, 0x35, 0xbb, 0x04, 0x9a, 0xe1, 0x8e, 0x07, 0x31, 0x4d, 0x17,
	0xd2, 0x97, 0x8c, 0xc3, 0xff, 0x4f, 0x83, 0xfb, 0xa2, 0x42, 0x4e, 0x7b, 0xe1, 0x84, 0x6c, 0x0d,
	0x54, 0xe9, 0x8e, 0xcf, 0x62, 0x9a, 0x9e, 0xad, 0xee, 0xc4, 0x5f, 0xd6, 0xe2, 0xb7, 0xad, 0xd8,
	0xe8, 0x6e, 0xa3, 0x2d, 0x1e, 0xa5, 0x9f, 0xf6, 0xeb, 0x6d, 0x55, 0x2b, 0xe3, 0x2c, 0x0f, 0x63,
	0x92, 0x86, 0x72, 0xc2, 0xe5, 0x03, 0xcc, 0x27, 0xa9, 0x8f, 0xb5, 0x57, 0xc7, 0x31, 0xa9, 0x2f,
	0xd9, 0x15, 0x84, 0x5d, 0x76, 0x70, 0x8a, 0x07, 0x7d, 0x6f, 0x80, 0xa7, 0xe0, 0x91, 0x24, 0x2f,
	0x70, 0xfe, 0xe3, 0xd8, 0xba, 0x83, 0xf5, 0x52, 0x85, 0x68, 0xb0, 0x1f, 0x9f, 0xcb, 0x01, 0xd8,
	0x35, 0x44, 0xad, 0x2d, 0xbc, 0xef, 0xb0, 0x61, 0xa4, 0xb1, 0xaf, 0x70, 0x3a, 0x77, 0xa4, 0xd5,
	0x3b, 0x44, 0xd2, 0x69, 0xad, 0x90, 0xbd, 0x01, 0x95, 0x4e, 0xb3, 0xf4, 0xd4, 0x8b, 0x97, 0x37,
	0x27, 0x28, 0x7d, 0xd2, 0xe4, 0xdf, 0x2d, 0x79, 0x9e, 0xbd, 0x06, 0x4d, 0x9e, 0x47, 0xfd, 0x7f,
	0xde, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xf4, 0x22, 0x36, 0xdd, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunnerClient is the client API for Runner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunnerClient interface {
	Run(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (Runner_RunClient, error)
}

type runnerClient struct {
	cc *grpc.ClientConn
}

func NewRunnerClient(cc *grpc.ClientConn) RunnerClient {
	return &runnerClient{cc}
}

func (c *runnerClient) Run(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (Runner_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Runner_serviceDesc.Streams[0], "/github.com.shoma.rcid.pb.Runner/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &runnerRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Runner_RunClient interface {
	Recv() (*CommandResult, error)
	grpc.ClientStream
}

type runnerRunClient struct {
	grpc.ClientStream
}

func (x *runnerRunClient) Recv() (*CommandResult, error) {
	m := new(CommandResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RunnerServer is the server API for Runner service.
type RunnerServer interface {
	Run(*CommandRequest, Runner_RunServer) error
}

func RegisterRunnerServer(s *grpc.Server, srv RunnerServer) {
	s.RegisterService(&_Runner_serviceDesc, srv)
}

func _Runner_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RunnerServer).Run(m, &runnerRunServer{stream})
}

type Runner_RunServer interface {
	Send(*CommandResult) error
	grpc.ServerStream
}

type runnerRunServer struct {
	grpc.ServerStream
}

func (x *runnerRunServer) Send(m *CommandResult) error {
	return x.ServerStream.SendMsg(m)
}

var _Runner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.shoma.rcid.pb.Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _Runner_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rcid.proto",
}
